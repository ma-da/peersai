# Our dedicated gateway is: peers.mypinata.cloud
# Our gateway domain is: ai.peerservice.org

import requests
import json
import os

# ====== CONFIG ======
JWT = "THE_JWT"  # Your Pinata JWT
# ====================

# Path to your local .txt file
file_path = "C:/datasources/aitest5.txt"

# Desired name and metadata (values must be strings)
name = "aitest5.txt"
keyvalues = {"env": "prod"}
metadata_json = {"keyvalues": {k: str(v) for k, v in keyvalues.items()}}

# choose the name to appear inside IPFS (no directories)
upload_name = name or os.path.basename(file_path)

with open(file_path, "rb") as file_data:
    files = {
        # use basename (or your provided `name`)
        "file": (upload_name, file_data, "text/plain")
    }
    data = {
        "network": "public",
        "name": upload_name,                      # optional but nice to keep consistent
        "metadata": json.dumps(metadata_json)     # must be 'metadata' and values must be strings
    }
    headers = {"Authorization": f"Bearer {JWT}"}

    response = requests.post(
        "https://uploads.pinata.cloud/v3/files",
        headers=headers,
        files=files,
        data=data,
        timeout=120
    )

# Handle the response
if response.ok:
    print("Upload successful!")
    print(response.json())
else:
    print("Upload failed:", response.status_code)
    print(response.text)def download_file(cid: str, filename: str) -> str:
    """Download a raw file from your custom gateway by CID and filename."""
    url = f"{GATEWAY_DOMAIN}/ipfs/{cid}/{filename}?format=raw"
    headers = {"Accept": "text/plain, application/octet-stream;q=0.9"}

    response = requests.get(url, headers=headers)
    if response.ok:
        print("Download successful!")
        return response.text
    else:
        raise RuntimeError(f"Failed to fetch: {response.status_code} {response.text}")

# ===== EXAMPLE GOOD RESPONSE =====

{'data': {'id': '0198af81-e08e-7f33-8b0f-0c41ed9b96ab', 'name': 'aitest5.txt', 'size': 344, 'mime_type': 'text/plain', 'cid': 'bafkreibdot7rq776eqwo5k4ogpmm5lcxh2lwg5qx7fxum6xfiq6uf4ktzq', 'network': 'public', 'number_of_files': 1, 'streamable': False, 'created_at': '2025-08-15T20:53:01.405Z', 'updated_at': '2025-08-15T20:53:01.405Z'}}

# ===== REQUEST THE FILE BY CID =====

cid = "bafkreibdot7rq776eqwo5k4ogpmm5lcxh2lwg5qx7fxum6xfiq6uf4ktzq"
url = f"https://ai.peerservice.org/ipfs/{cid}?format=raw"

r = requests.get(
    url,
    headers={"Accept": "text/plain, application/octet-stream;q=0.9"}
)
r.raise_for_status()
text = r.text  # or r.content for bytes

response = requests.get(url)

if response.ok:
    print(response.text)
else:
    print("Failed to fetch:", response.status_code, response.text)
